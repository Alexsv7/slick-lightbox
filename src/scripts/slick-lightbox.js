// Generated by CoffeeScript 1.6.2
/*
# SlickLightbox documentation #

Documentation generated by [CoffeeDoc](http://github.com/omarkhan/coffeedoc)
*/


(function() {
  var SlickLightbox;

  if (window.SlickLightbox != null) {
    return;
  }

  SlickLightbox = (function() {
    /*
    	The one and only class used.
    */
    function SlickLightbox(element, options) {
      var _ref,
        _this = this;

      this.options = options;
      /* Binds the plugin.
      */

      this.element = $(element);
      if ((_ref = this.options) == null) {
        this.options = {};
      }
      this.element.on('click.slickLightbox', 'a', function(e) {
        e.preventDefault();
        return _this.init();
      });
    }

    SlickLightbox.prototype.init = function() {
      /* Creates the lightbox, opens it, binds events and calls `slick`.
      */
      this.createModal();
      this.open();
      this.bindEvents();
      return this.slick();
    };

    SlickLightbox.prototype.createModal = function() {
      /* Creates a `slick`-friendly modal with a simple `ul`.
      */

      var html, links;

      links = $.map(this.element.find('a'), function(el) {
        return "<div class=\"slick-lightbox-slick-item\"><img class=\"slick-lightbox-slick-img\" src=\"" + el.href + "\" /></div>";
      });
      html = "<div class=\"slick-lightbox slick-hide\">\n	<div class=\"slick-lightbox-inner\">\n		<div class=\"slick-lightbox-slick\">" + (links.join('')) + "</div>\n		<button type=\"button\" class=\"slick-lightbox-close\"></button>\n	<div>\n<div>";
      this.modalElement = $(html);
      return $('body').append(this.modalElement);
    };

    SlickLightbox.prototype.slick = function() {
      /* Runs slick by default, using `options.slick` if provided. If `options.slick` is a function, it gets fired instead of us initializing slick.
      */
      if (this.options.slick != null) {
        if (typeof this.options.slick === 'function') {
          this.options.slick(this.modalElement);
        } else {
          this.modalElement.find('.slick-lightbox-slick').slick(this.options.slick);
        }
      } else {
        this.modalElement.find('.slick-lightbox-slick').slick();
      }
      return this.modalElement.trigger('init.slickLightbox');
    };

    SlickLightbox.prototype.open = function() {
      /* Opens the lightbox.
      */
      return this.modalElement.removeClass('slick-hide');
    };

    SlickLightbox.prototype.close = function() {
      /* Closes the lightbox and destroys it, maintaining the original element bindings.
      */
      this.modalElement.addClass('slick-hide');
      return this.destroy();
    };

    SlickLightbox.prototype.bindEvents = function() {
      /* Binds global events.
      */

      var resizeSlides,
        _this = this;

      resizeSlides = function() {
        return _this.modalElement.find('.slick-lightbox-slick-item').height(_this.modalElement.find('.slick-lightbox-inner').height());
      };
      $(window).on('orientationchange.slickLightbox resize.slickLightbox', resizeSlides);
      this.modalElement.on('init.slickLightbox', resizeSlides);
      this.modalElement.on('destroy.slickLightbox', function() {
        return _this.destroy();
      });
      return this.modalElement.on('click.slickLightbox touchstart.slickLightbox', '.slick-lightbox-close', function(e) {
        e.preventDefault();
        return _this.close();
      });
    };

    SlickLightbox.prototype.unbindEvents = function() {
      /* Unbinds global events.
      */
      $(window).off('.slickLightbox');
      return this.modalElement.off('.slickLightbox');
    };

    SlickLightbox.prototype.destroy = function(unbindAnchors) {
      if (unbindAnchors == null) {
        unbindAnchors = false;
      }
      /* Destroys the lightbox and unbinds global events. If `true` is passed as an argument, unbinds the original element as well.
      */

      this.unbindEvents();
      this.modalElement.remove();
      if (unbindAnchors) {
        return this.element.off('.slickLightbox');
      }
    };

    return SlickLightbox;

  })();

  $.fn.slickLightbox = function(options) {
    return this.slickLightbox = new SlickLightbox(this, options);
  };

  $.fn.unslickLightbox = function(options) {
    return this.slickLightbox.destroy(true);
  };

}).call(this);
