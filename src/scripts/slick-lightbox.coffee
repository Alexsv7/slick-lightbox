###
# SlickLightbox documentation #

Documentation generated by [CoffeeDoc](http://github.com/omarkhan/coffeedoc)
###

class SlickLightbox
	###
	The one and only class used.
	###
	constructor: (element, @options) ->
		### Binds the plugin. ###
		@element = $(element)
		@options ?= {}
		that = @
		@element.on 'click.slickLightbox', 'a', (e) ->
			e.preventDefault()
			that.init that.element.find('a').index($(this))
	init: (index) ->
		### Creates the lightbox, opens it, binds events and calls `slick`. Accepts `index` of the element, that triggered it (so that we know, on which slide to start slick). ###
		# @destroyPrevious()
		@createModal(index)
		@open()
		@bindEvents()
		@slick()
	createModal: (index = 0) ->
		### Creates a `slick`-friendly modal. Rearranges the items so that the `index`-th item is placed first. ###
		createItem = (el) ->
			"""<div class="slick-lightbox-slick-item"><img class="slick-lightbox-slick-img" src="#{ el.href }" /></div>"""
		# We need to start with the `index`-th item.
		a = @element.find('a')
		if index is 0 or index is -1
			links = $.map a, createItem
		else
			links = $.map a.slice(index), createItem
			$.each a.slice(0, index), (i, el) ->
				links.push createItem el

		html = """
		<div class="slick-lightbox slick-hide">
			<div class="slick-lightbox-inner">
				<div class="slick-lightbox-slick">#{ links.join('') }</div>
				<button type="button" class="slick-lightbox-close"></button>
			<div>
		<div>
		"""
		@modalElement = $(html)
		$('body').append @modalElement
	slick: (index) ->
		### Runs slick by default, using `options.slick` if provided. If `options.slick` is a function, it gets fired instead of us initializing slick. ###
		if @options.slick?
			if typeof @options.slick is 'function'
				# TODO: support element's index
				@options.slick @modalElement
			else
				@slick = @modalElement.find('.slick-lightbox-slick').slick @options.slick

		else
			@slick = @modalElement.find('.slick-lightbox-slick').slick()
		@modalElement.trigger 'init.slickLightbox'
	open: ->
		### Opens the lightbox. ###
		@modalElement.removeClass('slick-hide')
	close: ->
		### Closes the lightbox and destroys it, maintaining the original element bindings. ###
		@modalElement.addClass('slick-hide')
		@destroy()
	bindEvents: ->
		### Binds global events. ###
		resizeSlides = =>
			@modalElement.find('.slick-lightbox-slick-item').height @modalElement.find('.slick-lightbox-inner').height()
		$(window).on 'orientationchange.slickLightbox resize.slickLightbox', resizeSlides
		@modalElement.on 'init.slickLightbox', resizeSlides
		@modalElement.on 'destroy.slickLightbox', => @destroy()
		@modalElement.on 'click.slickLightbox touchstart.slickLightbox', '.slick-lightbox-close', (e) =>
			e.preventDefault()
			@close()
	unbindEvents: ->
		### Unbinds global events. ###
		$(window).off '.slickLightbox'
		@modalElement.off '.slickLightbox'
	destroy: (unbindAnchors = false) ->
		### Destroys the lightbox and unbinds global events. If `true` is passed as an argument, unbinds the original element as well. ###
		@unbindEvents()
		@modalElement.remove()
		if unbindAnchors
			@element.off '.slickLightbox'
	destroyPrevious: ->
		### Destroys lightboxes currently in DOM. ###
		$('body').children('.slick-lightbox').trigger 'destroy.slickLightbox'

# jQuery method
$.fn.slickLightbox = (options) ->
	this.slickLightbox = new SlickLightbox this, options
$.fn.unslickLightbox = (options) ->
	this.slickLightbox.destroy(true)
